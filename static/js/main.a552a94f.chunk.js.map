{"version":3,"sources":["ToDoItem.jsx","InputArea.jsx","App.jsx","index.js"],"names":["ToDoItem","props","onClick","onChecked","id","text","InputArea","className","onChange","change","type","value","input","add","App","useState","inputText","setInputText","items","setItems","deleteItem","prevItems","filter","item","index","event","newValue","target","map","todoItem","ReactDOM","render","document","getElementById"],"mappings":"+MAceA,MAZf,SAAkBC,GAChB,OACE,qBACEC,QAAS,KACPD,EAAME,UAAUF,EAAMG,KAF1B,SAKE,6BAAKH,EAAMI,UCIFC,MAXf,SAAmBL,GACjB,OACE,sBAAKM,UAAU,OAAf,UACE,uBAAOC,SAAUP,EAAMQ,OAAQC,KAAK,OAAOC,MAAOV,EAAMW,QACxD,wBAAQV,QAASD,EAAMY,IAAvB,SACE,6CC2COC,MA9Cf,WAAgB,MAAD,EACqBC,mBAAS,IAD9B,mBACNC,EADM,KACKC,EADL,OAEaF,mBAAS,IAFtB,mBAENG,EAFM,KAECC,EAFD,KAgBb,SAASC,EAAWhB,GAClBe,GAAUE,GACDA,EAAUC,QAAO,CAACC,EAAMC,IACtBA,IAAUpB,MAKvB,OACE,sBAAKG,UAAU,YAAf,UACE,qBAAKA,UAAU,UAAf,SACE,8CAEF,cAAC,EAAD,CAAWK,MAAOI,EAAWP,OAzBjC,SAAsBgB,GACpB,MAAMC,EAAWD,EAAME,OAAOhB,MAC9BM,EAAaS,IAuBwCb,IApBvD,WACEM,GAAUE,GACD,IAAIA,EAAWL,KAExBC,EAAa,OAiBX,8BACE,6BACGC,EAAMU,KAAI,CAACC,EAAUL,IACpB,cAAC,EAAD,CAEEpB,GAAIoB,EACJnB,KAAMwB,EACN1B,UAAWiB,GAHNI,aClCnBM,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.a552a94f.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction ToDoItem(props) {\n  return (\n    <div\n      onClick={() => {\n        props.onChecked(props.id);\n      }}\n    >\n      <li>{props.text}</li>\n    </div>\n  );\n}\n\nexport default ToDoItem;\n","import React from \"react\";\n\nfunction InputArea(props) {\n  return (\n    <div className=\"form\">\n      <input onChange={props.change} type=\"text\" value={props.input} />\n      <button onClick={props.add}>\n        <span>Add</span>\n      </button>\n    </div>\n  );\n}\n\nexport default InputArea;\n","import React, { useState } from \"react\";\nimport ToDoItem from \"./ToDoItem\";\nimport InputArea from \"./InputArea\";\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [items, setItems] = useState([]);\n\n  function handleChange(event) {\n    const newValue = event.target.value;\n    setInputText(newValue);\n  }\n\n  function addItem() {\n    setItems((prevItems) => {\n      return [...prevItems, inputText];\n    });\n    setInputText(\"\");\n  }\n\n  function deleteItem(id) {\n    setItems((prevItems) => {\n      return prevItems.filter((item, index) => {\n        return index !== id;\n      });\n    });\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"heading\">\n        <h1>To-Do List</h1>\n      </div>\n      <InputArea input={inputText} change={handleChange} add={addItem} />\n      <div>\n        <ul>\n          {items.map((todoItem, index) => (\n            <ToDoItem\n              key={index}\n              id={index}\n              text={todoItem}\n              onChecked={deleteItem}\n            />\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n//CHALLENGE: I have extracted the Input Area, including the <input> and\n//<button> elements into a seperate Component called InputArea.\n//Your job is to make the app work as it did before but this time with the\n//InputArea as a seperate Component.\n\n// DO NOT: Modify the ToDoItem.jsx\n// DO NOT: Move the input/button elements back into the App.jsx\n\n//Hint 1: You will need to think about how to manage the state of the input element\n//in InputArea.jsx.\n//Hint 2: You will need to think about how to pass the input value back into\n//the addItem() function in App.jsx.\n"],"sourceRoot":""}